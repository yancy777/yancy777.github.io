@charset "utf-8"; //指定字符编码
/*选择器嵌套*/
//.parent{
//  color:red;
//  .child{
//      width: 100px;
//  }
//}
//.parent{
//  color:red;
//  
//}
//.parent .chlid{
//  color:red;
//  width: 100px;
//}
/*@at-root*/
/*单个选择器跳出*/
//.parent{
//  color: red;
//  @at-root.child{
//      width: 200px;
//  }
//}
/*多个选择器跳出*/
//.parent-3 {
//background:#f00;
//@at-root {
//  .child1 {
//    width:300px;
//  }
//  .child2 {
//    width:400px;
//  }
//}
//}
/*@at-root与&配合使用*/
//.child{
//  @at-root .parent &{
//      color:#f00;
//  }
//}

//特殊变量
//一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以#{$variables}形式使用。

$borderDirection:top !default; 
$baseFontSize:12px !default;
$baseLineHeight:1.5 !default;

/*应用于class和属性*/
//.border-top{
//  border-top:1px solid red;
//}
.border-#{$borderDirection}{
    border-#{$borderDirection}:1px solid #ccc;
}
/*应用于复杂的属性值*/
body{
    font:#{$baseFontSize}/#{$baseLineHeight};
//  font:12px/1.5;
}

//多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象。
//一维数据
$px: 5px 10px 20px 30px;

//二维数据，相当于js中的二维数组
$px: 5px 10px, 20px 30px;
$px: (5px 10px) (20px 30px);
//list数据可通过空格，逗号或小括号分隔多个值，可用nth($var,$index)取值。
$linkColor: #08c #333 !default;//第一个值为默认值，第二个鼠标滑过值
a{
color:nth($linkColor,1);

&:hover{
    color:nth($linkColor,2);
}
}


//http://sass-lang.com/documentation/Sass/Script/Functions.html   sass Function

//map数据以key和value成对出现，其中value又可以是list。格式为：$map: (key1: value1, key2: value2, key3: value3);。
/*$map 取值*/
$heading: (h1: 2em, h2: 1.5em, h3: 1.2em);
   @each $header, $size in $heading{
#{$header} {
    font-size: $size;
}
}

//混合
//sass中使用@mixin声明混合，可以传递参数，参数名以$符号开始，多个参数以逗号分开，也可以给参数设置默认值。声明的@mixin通过@include来调用。
//无参数
@mixin center-block {
    margin-left:auto;
    margin-right:auto;
}
.demo{
    @include center-block;
}

//有参数
@mixin opacity($opacity:50) {
opacity: $opacity / 100;
filter: alpha(opacity=$opacity);
}
.opacity{
    @include opacity; //参数使用默认值
}
.opacity-80{
@include opacity(80); //传递参数
}

//多个参数
@mixin horizontal-line($border:1px dashed #ccc, $padding:10px){
    border-bottom:$border;
    padding-top:$padding;
    padding-bottom:$padding;  
}
.imgtext-h li{
    @include horizontal-line(1px solid #ccc);
}
.imgtext-h--product li{
    @include horizontal-line($padding:15px);
}

//多组值参数mixin

//box-shadow可以有多组值，所以在变量参数后面添加...
@mixin box-shadow($shadow...) {
-webkit-box-shadow:$shadow;
box-shadow:$shadow;
-moz-box-shadow:$shadow;
-o-box-shadow:$shadow;
}
.box{
border:1px solid #ccc;
@include box-shadow(0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(255,0,0,.3),0 4px 4px rgba(0,255,0,.3));
}


//继承
//sass中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词@extend，后面紧跟需要继承的选择器。
h1{
border: 4px solid #ff9aa9;
}
.speaker{
@extend h1;
border-width: 2px;
}

//占位选择器%
//从sass 3.2.0以后就可以定义占位选择器%。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了@extend去继承相应的样式，都会解析出来所有的样式。占位选择器以%标识定义，通过@extend调用。

%ir{
color: transparent;
text-shadow: none;
background-color: transparent;
border: 0;
}
%ww{
    width: 300px;
    height: 200px;
    background: red;
}
//$lte7:true;
// %clearfix{
//@if $lte7 {
//  *zoom: 1;
//}
//&:before,
//&:after {
//  content: "";
//  display: table;
//  font: 0/0 a;
//}
//&:after {
//  clear: both;
//}
//}
#header{
h1{
    @extend %ir;
    width:300px;
}
}

//.ir{
//@extend %ir;
//}


/*@if判断*/
//@if可一个条件单独使用，也可以和@else结合多条件使用
//$lte7: true;
$type: monster;
//.ib{
//  display:inline-block;
//  @if $lte7 {
//      *display:inline;
//      *zoom:1;
//  }
//}
p {
@if $type == ocean {
    color: blue;
} @else if $type == matador {
    color: red;
} @else if $type == monster {
    color: green;
} @else {
    color: black;
}
}

/*三目运算符*/
$fontBold: true;
.title {
    font-weight: if($fontBold, bold, normal);
}
